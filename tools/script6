#!/usr/bin/perl
#
# script6: A tool to make complex IPv6 tasks easy
#

if($ARGV[0] eq "get-aaaa"){
	while($domain=<STDIN>){
		$aaaa_f=0;
		chomp($domain);
		$domain =~ m/([^\x0d]+)/;
		$domcmd= $1;

		if( $domcmd =~ m/^\S*#/){
			next;
		}


		while(1){
			@dig=`dig $domcmd aaaa`;
			$answer_f=0;

			foreach $line (@dig){
				if($answer_f == 0){
				# Detect the "ANSWER" portion of the dig command
					if($line =~ m/\;\; ANSWER SECTION:/){
						$answer_f=1;
					}

					next; 
				}
				elsif($answer_f == 1){
					# If we are in the answer portion, look for AAAA records
					if($line =~ m/^\s*$/){
						last;
					}

					elsif($line =~ m/(\S+)\s+\d+\s+IN\s+AAAA\s+([a-fA-F0-9:]+)/){
						if($aaaa_f == 0){
							print "# $domcmd ($1)\n";
						}

						print "$2\n";      # AAAA record
						$aaaa_f = 1;
					}
					else{
						last;
					}
				}
			}
		 

			# If we found AAAA records, try the next domain
			if($aaaa_f == 1){
				last;
			}

			# If we didn't find any AAAA records, and the domain name does not start with "www",
			# add the "www" suffix and see if there are any AAAA records.
			if($domcmd =~ m/www\.[a-zA-Z_0-9.]/){
				last;
			}
			else{
				$domcmd= "www.$domain";
			}
		}
	}
}
elsif($ARGV[0] eq "get-mx"){
	while($domain=<STDIN>){
		    # This variable set to 1 indicates that we already found the MX records
		$mx_f=0;

		chomp($domain);
		$domain =~ m/([^\x0d]+)/;
		$domcmd= $1;

		if( $domcmd =~ m/^\S*#/){
			next;
		}

		if($domcmd =~ m/www\.(\S+)/){
			$domcmd = $1;
		}

			@dig=`dig $domcmd mx`;

			$answer_f=0;
			foreach $line (@dig){

				# Detect the "ANSWER" portion of the dig command
				if($answer_f == 0){
					if($line =~ m/\;\; ANSWER SECTION:/){
						$answer_f=1; # Found the ANSWER section
					}

					next;  
				}
				elsif($answer_f == 1){
					# If we are in the answer portion, look for MX records
					if($line =~ m/^\s*$/){
						# Empty line masrk end of ANSWER section
						last;
	#					$answer_f=0;
	#					next;
					}

					elsif($line =~ m/(\S+)\s+\d+\s+IN\s+MX\s+\d+\s+(\S+)/){
						# FIrst 
						if($mx_f == 0){
							print "# $domcmd ($1)\n";
						}

						printf "$2\n";      # MX record
						$mx_f = 1;
					}
					else{
						last;
					}
				}
			}
	}
}
elsif($ARGV[0] eq "get-ns"){
	while($domain=<STDIN>){
		$ns_f=0;
		chomp($domain);
		$domain =~ m/([^\x0d]+)/;
		$domcmd= $1;

		if($domcmd =~ m/www\.(\S+)/){
			$domcmd = $1;
		}
	
		@dig=`dig $domcmd ns`;
		$answer_f=0;

		foreach $line (@dig){
			if($answer_f == 0){
				# Detect the "ANSWER" portion of the dig command
				if($line =~ m/\;\; ANSWER SECTION:/){
					$answer_f=1;
				}

				next; 
			}
			elsif($answer_f == 1){
				# If we are in the answer portion, look for AAAA records
				if($line =~ m/^\s*$/){
					last;
				}

				elsif($line =~ m/(\S+)\s+\d+\s+IN\s+NS\s+(\S+)/){
					if($ns_f == 0){
						print "# $domcmd ($1)\n";
					}

					printf "$2\n";      # AAAA record
					$ns_f = 1;
				}
				else{
					last;
				}
			}
		}
	}
}
elsif($ARGV[0] eq "get-alexa-domains"){
	while($line=<STDIN>){
		while($line =~ m{\d+,([^/\s]*)}ig){
			print "$1\n";		
		}
	}
}
elsif($ARGV[0] eq "trace-do8-tcp-stdin"){
	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p tcp -a 80 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p tcp -a 80 -u 8 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}


		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-do8-icmp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	#print "Voy a empezar";

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p icmp -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p icmp -u 8 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

#		if($i > $#ipsfree){
#			next;
#		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-do256-tcp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p tcp -a 80 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p tcp -a 80 -u 256 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

#		if($i > $#ipsfree){
#			next;
#		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-do256-icmp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;


	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p icmp -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p icmp -u 256 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

#		if($i > $#ipsfree){
#			next;
#		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-hbh8-tcp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p tcp -a 80 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p tcp -a 80 -H 8 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

#		if($i > $#ipsfree){
#			next;
#		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-hbh8-icmp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p icmp -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p icmp -H 8 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}


		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-hbh256-tcp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p tcp -a 80 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p tcp -a 80 -H 256 -d $fline --tcp-flags S --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-hbh256-icmp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	#print "Voy a empezar";

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p icmp -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p icmp -H 256 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-fh256-tcp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p tcp -a 80 --tcp-flags S -P 450 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p tcp -a 80 --tcp-flags S -P 450 -y 256 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		$dropip="";
		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace-fh256-icmp"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -p icmp -P 450 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -p icmp -P 450 -y 256 -d $fline --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		$dropip="";
		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";
	}
}
elsif($ARGV[0] eq "trace" || $ARGV[0] eq "trace6"){
	if($> != 0){
		print "Error: This script requires superuser privileges\n";
		exit 1;
	}

	$total=0;
	$response=0;
	$timeout=0;

	$ehtype= "do";
	$ehsize= "8";
	$prototype="icmp";

	if($#ARGV > 0){
		if($ARGV[1] =~ m/([a-zA-Z]+):?(\d+)/){
			$ehtype= lc($1);
			$ehsize= $2;
		}
		else{
			$ehtype= $ARGV[1];
		}

		if($#ARGV > 1){
			$prototype=	$ARGV[2];

			if($#ARGV > 2){
				$port=	$ARGV[3];
			}
			else{
				$port= "80";
			}
		}
	}

	if($prototype eq "tcp"){
		$protoopt= "--tcp-flags S -a $port";
	}
	else{
		$protoopt="";
	}

	if($ehtype eq "fh" || $ehtype eq "frag"){
		if($ehsize < 8){
			print "Error: Fragment size should be larger than or equal to 8 bytes";
			exit 1;
		}
		elsif($ehsize > 1280){
			print "Error: Fragment size should be smaller than or equal to 1280 bytes";
			exit 1;
		}

		$payload= ($ehsize * 2) - 8;
		$protoopt="-P $payload " . $protoopt;
	}

	if($ehtype eq "fh" || $ehtype eq "frag"){
		$eh= "-y $ehsize";
	}
	elsif($ehtype eq "hbh"){
		$eh= "-H $ehsize";
	}
	elsif($ehtype eq "do"){
		$eh= "-u $ehsize";
	}
	else{
		print "Error: Unknown EH type";
		exit 1;
	}

#	print "path6 -d NOSPEC -p $prototype $protoopt --rate-limit 20pps\n";
#	print "path6 -d NOSPEC -p $prototype $protoopt $eh --rate-limit 20pps\n";

	while($fline=<STDIN>){
		chomp($fline);

		if($fline =~ m/([^\x0d]+)/){
			$fline= $1;
		}

		# Check whether this line is just a comment -- if so, skip it
		if($fline =~ m/^((\s)*#)/){
			next;
		}

		# Skip blanck lines 
		if($fline =~ m/^(\s)*$/){
			next;
		}

		# Remove all items from the array of IP addresses
		undef @ipsfree;

		$maxhopsfree=0;
		$maxhopsfreeip="";
		@tcp=`path6 -d $fline -p $prototype $protoopt --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopsfree){
					if($2 ne ""){
						$maxhopsfree=$1;
						$maxhopsfreeip=$2;
					}

					# We store the IPv6 addresses of all hops
					push(@ipsfree, $2);
				}
			}
		}

		$maxhopstrouble=0;
		$maxhopstroubleip="";
		@tcp=`path6 -d $fline -p $prototype $protoopt $eh --rate-limit 20pps`;
		foreach $line (@tcp){
			# Discard lines that do not contain a "probe" line
			if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
				if($1 > $maxhopstrouble){
					if($2 ne ""){
						$maxhopstrouble=$1;
						$maxhopstroubleip= $2;
					}
				}
			}
		}

		$dropip="";
		for($i=0; $i<= $#ipsfree; $i++){
			if($ipsfree[$i] eq $maxhopstroubleip){
				if($i == $#ipsfree){
					$dropip= $ipsfree[$i];
					last;
				}
				else{
					$dropip= $ipsfree[$i+1];
					last;
				}
			}
		}

		print "$fline#$maxhopsfreeip#$maxhopsfree#$maxhopstroubleip#$maxhopstrouble#$dropip\n";

	}
}
else{
	print "SI6 Networks IPv6 Toolkit v2.0\n";
	print "script6: A tool to make complex IPv6 tasks easy\n";
}
