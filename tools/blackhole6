#!/usr/bin/perl
#
# blackhole6: A tool to make complex IPv6 tasks easy
#
# Syntax: blackhole6 DESTINATION [HEADERSIZE [PROTOCOL [PORT]]]

$total=0;
$response=0;
$timeout=0;

sub usage{
	print "usage: blackhole6 DESTINATION [EH_TYPE[:EHSIZE]] [PROTOCOL [PORT]]]\n";
}


sub GetASN{
	@revname=`addr6 -a $_[0] -r`;
	chomp($revname[0]);
	$queryname= $revname[0] . ".origin6.asn.cymru.com.";
	@reverse=`host -t TXT $queryname`;
	$reverse[0] =~ m/\"\s*((\d+)\s*)\s+|"/;
	return($2);
}

sub GetORG{
	$querystring="host -t TXT AS".$_[0].".asn.cymru.com";
	@asinfo= `$querystring`;
	$asinfo[0] =~ m/\"*.\|.*\|.*\|.*\|\s*(.*)\"/;
	return($1);
}

# Remove all items from the array of IP addresses
undef @ipsfree;

print "SI6 Networks IPv6 Toolkit v2.0\n";
print "blackhole6: A tool to find IPv6 blackholes\n";

if($> != 0){
	print "Error: blackhole6 requires superuser privileges\n";
	usage();
	exit 1;
}

if($#ARGV < 0){
	print "Error: Must specify an IPv6 address\n";
	usage();
	exit 1;
}

$ehtype= "do";
$ehsize= "8";
$prototype="icmp";

if($#ARGV > 0){
	if($ARGV[1] =~ m/([a-zA-Z]+):?(\d+)/){
		$ehtype= lc($1);
		$ehsize= $2;
	}
	else{
		$ehtype= $ARGV[1];
	}

	if($#ARGV > 1){
		$prototype=	$ARGV[2];

		if($#ARGV > 2){
			$port=	$ARGV[3];
		}
		else{
			$port= "80";
		}
	}
}

if($prototype eq "tcp"){
	$protoopt= "--tcp-flags S -a $port";
}
else{
	$protoopt="";
}

if($ehtype eq "fh" || $ehtype eq "frag"){
	if($ehsize < 8){
		print "Error: Fragment size should be larger than or equal to 8 bytes";
		exit 1;
	}
	elsif($ehsize > 1280){
		print "Error: Fragment size should be smaller than or equal to 1280 bytes";
		exit 1;
	}

	$payload= ($ehsize * 2) - 8;
	$protoopt="-P $payload " . $protoopt;
}

if($ehtype eq "fh" || $ehtype eq "frag"){
	$eh= "-y $ehsize";
}
elsif($ehtype eq "hbh"){
	$eh= "-H $ehsize";
}
elsif($ehtype eq "do"){
	$eh= "-u $ehsize";
}
else{
	print "Error: Unknown EH type";
	exit 1;
}


$fline= $ARGV[0];
$maxhopsfree=0;
$maxhopsfreeip="";
@tcp=`path6 -d $fline -p $prototype $protoopt --rate-limit 40pps`;
foreach $line (@tcp){
	# Discard lines that do not contain a "probe" line
	if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
		if($1 > $maxhopsfree){
			if($2 ne ""){
				$maxhopsfree=$1;
				$maxhopsfreeip=$2;
			}

			# We store the IPv6 addresses of all hops
			push(@ipsfree, $2);
		}
	}
}

$maxhopstrouble=0;
$maxhopstroubleip="";
@tcp=`path6 -d $fline -p $prototype $protoopt $eh --rate-limit 40pps`;
foreach $line (@tcp){
	# Discard lines that do not contain a "probe" line
	if($line =~ m/\s+(\d+)\s+\((\S*)\)/){
		if($1 > $maxhopstrouble){
			if($2 ne ""){
				$maxhopstrouble=$1;
				$maxhopstroubleip= $2;
			}
		}
	}
}

$dropip="";
for($i=0; $i<= $#ipsfree; $i++){
	if($ipsfree[$i] eq $maxhopstroubleip){
		if($i == $#ipsfree){
			$dropip= $ipsfree[$i];
			last;
		}
		else{
			$dropip= $ipsfree[$i+1];
			last;
		}
	}
}

$flineasn= GetASN($fline);

if($flineasn eq ""){
	$flineasn= "Unknown";
}


$maxhopsfreeasn= GetASN($maxhopsfreeip);

if($maxhopsfreeasn eq ""){
	$maxhopsfreeasn= "Unknown";
}

$maxhopstroubleasn= GetASN($maxhopstroubleip);

if($maxhopstroubleasn eq ""){
	$maxhopstroubleasn= "Unknown";
}

$ehtype_uc= uc($ehtype);
$flineorg= GetORG($flineasn);
$maxhopsfreeorg= GetORG($maxhopsfreeasn);
$maxhopstroubleorg= GetORG($maxhopstroubleasn);

print "\nDestination IPv6 address: $fline (AS$flineasn - $flineorg)\n";
print "Last resp. node (no EHs): $maxhopsfreeip (AS$maxhopsfreeasn - $maxhopsfreeorg) ($maxhopsfree hop(s))\n";
print "Last resp. node ($ehtype_uc $ehsize): $maxhopstroubleip (AS$maxhopstroubleasn -$maxhopstroubleorg) ($maxhopstrouble hop(s))\n";

if($maxhopsfreeip == $fline){
	if($maxhopstroubleip == $fline){
			print "Dropping node: No packet drops\n";
	}
	else{
		$dropasn= GetASN($dropip);
		$droporg= GetORG($dropasn);

		if($dropasn eq ""){
			$dropasn= "Unknown";
		}
		print "Dropping node: $dropip (AS$dropasn - $droporg)\n";
	}
}
else{
	print "Dropping nodes: Packets being dropped for both the no-EH and the EH case\n";
}

